<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Talian</title>
    <link>https://taliantiger.github.io/</link>
    <description>Recent content on Talian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Mar 2020 17:46:13 +0800</lastBuildDate>
    
	<atom:link href="https://taliantiger.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>多个实参输入一个形参中</title>
      <link>https://taliantiger.github.io/post3/%E5%A4%9A%E4%B8%AA%E5%AE%9E%E5%8F%82%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E5%BD%A2%E5%8F%82/</link>
      <pubDate>Sat, 28 Mar 2020 17:46:13 +0800</pubDate>
      
      <guid>https://taliantiger.github.io/post3/%E5%A4%9A%E4%B8%AA%E5%AE%9E%E5%8F%82%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E5%BD%A2%E5%8F%82/</guid>
      <description> 8-12 三明治：编写一个函数，它接受顾客要在三明治中添加的一系列食材 这函数只有一个形参(它收集函数调用中提供的所有食材),并打印一条消 息，对顾客雨酌三明治进行概述。调用这个函数三次，每次都提供不同数量的实参    函数注意事项：函数调用的多个形参，必须是一系列字符串元素，而不能是自己定义的列表变量！！   def accept_food( *somefood ):for somefood_1 in somefood :print(&amp;#34;- &amp;#34; + somefood_1)print(&amp;#39;\n&amp;#39;)accept_food(&amp;#39;a&amp;#39;) #函数这里调用的形参，必须是字符串元素，而不能是自己定义的列表变量！！ accept_food(&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;)accept_food(&amp;#39;d&amp;#39;,&amp;#39;e&amp;#39;,&amp;#39;f&amp;#39;)# ~ def make_pizza(*toppings):  # ~ print(&amp;#34;\nMaking a pizza with the following toppings:&amp;#34;)  # ~ for topping in toppings:  # ~ print(&amp;#34;- &amp;#34; + topping)  # ~ make_pizza(&amp;#39;pepperoni&amp;#39;)  # ~ make_pizza(&amp;#39;mushrooms&amp;#39;, &amp;#39;green peppers&amp;#39;, &amp;#39;extra cheese&amp;#39;) </description>
    </item>
    
    <item>
      <title>python:利用切片禁止函数修改列表</title>
      <link>https://taliantiger.github.io/post3/%E5%88%A9%E7%94%A8%E5%88%87%E7%89%87%E7%A6%81%E6%AD%A2%E5%87%BD%E6%95%B0%E4%BF%AE%E6%94%B9%E5%88%97%E8%A1%A8/</link>
      <pubDate>Sat, 28 Mar 2020 16:44:34 +0800</pubDate>
      
      <guid>https://taliantiger.github.io/post3/%E5%88%A9%E7%94%A8%E5%88%87%E7%89%87%E7%A6%81%E6%AD%A2%E5%87%BD%E6%95%B0%E4%BF%AE%E6%94%B9%E5%88%97%E8%A1%A8/</guid>
      <description> 8-11不变的魔术师:修改你为完成练习8-10而编写的程序,在调用函数make great()时,向它传递魔术师列表的副本。由于 不想修改原始列表, 请返回修改后的列表，并将其存储到另一个列表中。分别使用这两个列表来调用showmagicians(),确认一个列表包含的是原来的魔木师名字,而另一个列表包含的是添加了字样&amp;quot;theGreat&amp;quot;的魔术师名字。   函数核心关键:在调用函数输出时，函数的实参末尾加上切片 [:] ,相当于为函数创建了副本，这样函数原本的列表值就不会被改变了。  #定义“显示具体打印过程”的函数 ==》在函数中修改列表的模板 def print_magicians(unprinted_magicians_names,completed_magicians): while unprinted_magicians_names: current_magician = unprinted_magicians_names.pop() #每打印完一个，除去掉“未打印列表”中的一个元素 print(&amp;#34;Printing magicians: &amp;#34; + current_magician) completed_magicians.append(current_magician) #每打完一个，就把被打印的append保存在之前的空列表中 #定义“显示打印结果”的函数 def show_completed_magicians(completed_magicians): print(&amp;#34;\nThe following magicians have been printed:&amp;#34;) for completed_magician in completed_magicians: print(completed_magician) def make_great(completed_magicians,completed_magicians_2): print(&amp;#34;\nThe following magicians is new&amp;#34;) while completed_magicians: current_magician_2=&amp;#34;the Great &amp;#34; + completed_magicians.pop() #类似重复第一个函数，pop一个函数的列表，加入另外一个函数的列表 completed_magicians_2.append(current_magician_2) for completed_magician_2 in completed_magicians_2: print(completed_magician_2) unprinted_magicians_names=[&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;C&amp;#39;,&amp;#39;D&amp;#39;] completed_magicians=[] completed_magicians_2=[] print_magicians(unprinted_magicians_names[:],completed_magicians) #调用函数时，在实参这里添加 切片[:] ，就可以达到调用副本的目的 show_completed_magicians(completed_magicians) make_great(completed_magicians,completed_magicians_2) print(completed_magicians_2) #显示出添加“the Great” 后的结果 print(unprinted_magicians_names) </description>
    </item>
    
    <item>
      <title>《python编程从入门到实践》8_10例题</title>
      <link>https://taliantiger.github.io/post3/python_8_10%E4%BE%8B%E9%A2%98/</link>
      <pubDate>Sat, 28 Mar 2020 15:49:10 +0800</pubDate>
      
      <guid>https://taliantiger.github.io/post3/python_8_10%E4%BE%8B%E9%A2%98/</guid>
      <description>##《python编程从入门到实践》例题
 8-9 魔术师： 创建一个包含魔术师名字的列表，并将其传递给一个名为 show_magicians() 的函数，这个函数打印列表中每个函数的名字 8-10 了不起的魔术师：在你为完成练习 8—9 而编写的程序中，编写一个名为make_great()的函数，对魔术师列表进行修改，在每个魔术师的名字中都加入字样： the Great“。 调用函数show_magician,确认列表确实变了   构造函数关键: 函数（形参A，形参B），把形参A的列表pop出，再append到形参B的列表  def print_magicians(unprinted_magicians_names,completed_magicians): #定义“显示具体打印过程”的函数 ==》在函数中修改列表的模板 while unprinted_magicians_names: current_magician = unprinted_magicians_names.pop() #每打印完一个，除去掉“未打印列表”中的一个元素 print(&amp;#34;Printing magicians: &amp;#34; + current_magician) completed_magicians.append(current_magician) #每打完一个，就把被打印的append保存在之前的空列表中 #定义“显示打印结果”的函数 def show_completed_magicians(completed_magicians): print(&amp;#34;\nThe following magicians have been printed:&amp;#34;) for completed_magician in completed_magicians: print(completed_magician) def make_great(completed_magicians,completed_magicians_2): print(&amp;#34;\nThe following magicians is new&amp;#34;) while completed_magicians: current_magician_2=&amp;#34;the Great &amp;#34; + completed_magicians.pop() #类似重复第一个函数，pop一个函数的列表，加入另外一个函数的列表 completed_magicians_2.append(current_magician_2) for completed_magician_2 in completed_magicians_2: print(completed_magician_2) unprinted_magicians_names=[&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;C&amp;#39;,&amp;#39;D&amp;#39;] completed_magicians=[] completed_magicians_2=[] print_magicians(unprinted_magicians_names,completed_magicians) show_completed_magicians(completed_magicians) make_great(completed_magicians,completed_magicians_2) print(completed_magicians_2) #显示出添加“the Great” 后的结果 </description>
    </item>
    
    <item>
      <title>Leetcode习题_01</title>
      <link>https://taliantiger.github.io/post3/leetcode%E4%B9%A0%E9%A2%98_01/</link>
      <pubDate>Sat, 28 Mar 2020 08:59:32 +0800</pubDate>
      
      <guid>https://taliantiger.github.io/post3/leetcode%E4%B9%A0%E9%A2%98_01/</guid>
      <description>1.两数之和   给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
  你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。
  示例:
给定 nums = [2, 7, 11, 15], target = 9,因为 nums[0] + nums[1] = 2 + 7 = 9,所以返回 [0, 1]
   方法一:暴力法 遍历每个元素 xx，并查找是否存在一个值与 target - xtarget−x 相等的目标元素。
Java:
class Solution { public int[] twoSum(int[] nums, int target) { for (int i = 0; i &amp;lt; nums.length; i++) { for (int j = i + 1; j &amp;lt; nums.</description>
    </item>
    
    <item>
      <title>Hugo建立博客用到的代码</title>
      <link>https://taliantiger.github.io/post3/hugo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%94%A8%E5%88%B0%E7%9A%84%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Fri, 27 Mar 2020 13:36:13 +0800</pubDate>
      
      <guid>https://taliantiger.github.io/post3/hugo%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%94%A8%E5%88%B0%E7%9A%84%E4%BB%A3%E7%A0%81/</guid>
      <description>hugo建立博客用到的代码   前几天看了b站的程序羊的教学视频，学会了搭建个人博客。配置完git和hugo环境后，用到了很多git命令，现在在这里把后几步的git命令记录在这篇博客当中  建立好hugo和git环境后的前提下,在cmd中 1:输入代码 hugo new site myblog3 (myblog3是我自己的命名的一个例子)
 2:输入代码 git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c (这里的theme主题可以自己在网站上找，我这里是程序羊推荐的)
再输入代码 hugo server -t m10c --buildDrafts（在本地host先建立博客）
 3:输入代码 hugo new post3/blog3.md (创建 文件夹post（自己命名），同时在建立博客.md文件（blog3也是自己命名的）)
 4:输入代码 hugo --theme=m10c --baseUrl=&amp;quot;https://taliantiger.github.io/&amp;quot; --buildDrafts(用于建立public文件，其中&amp;quot;https://taliantiger.github.io/&amp;ldquo;填写你是自己之前建立的github仓库的地址)
 5:输入代码 cd public (转到public这个仓库)
 6:输入代码 git init  (git基本操作）
 7:输入代码 git add .  (git基本操作）
 8:输入代码 git commit -m &amp;quot;taliantigertest&amp;quot; （把public文件提交到github上,其中&amp;quot;taliantigertest&amp;quot;可以自己填写，用作本次上传的标注文字）
 9:输入代码 git remote add origin https://github.com/taliantiger/taliantiger.github.io.git （把本地文件挂在远端）</description>
    </item>
    
    <item>
      <title>Second</title>
      <link>https://taliantiger.github.io/post3/second/</link>
      <pubDate>Fri, 27 Mar 2020 01:21:43 +0800</pubDate>
      
      <guid>https://taliantiger.github.io/post3/second/</guid>
      <description>This just a testing for my second blog published testing
I need to find out a way to save the problem of luanma with Chinese word.</description>
    </item>
    
    <item>
      <title>Welcome to Talian&#39;s blog</title>
      <link>https://taliantiger.github.io/post3/blog/</link>
      <pubDate>Wed, 25 Mar 2020 15:46:43 +0800</pubDate>
      
      <guid>https://taliantiger.github.io/post3/blog/</guid>
      <description>这是我的第一篇博客   个人邮箱：396318379@qq.com
  GitHub：https://github.com/Talian000001
  欢迎大家一同讨论计算机程序相关的问题
 下面的是一个图片添加尝试  论述如何在电脑本地git里，给github上传文件 1.创建好github文件库，打开文件库，出现文件库地址备用 2.接下来进行本地操作，在本地创建一个文件夹，右击，选择Git Bash Here,进入git界面 3.再然后，在界面输入如下代码，把github上的仓库克隆到本地 git clone https://github.com/Talian000001/photo.io （&amp;ldquo;https://github.com/Talian000001/photo.io&amp;quot;替换成你之前复制的地址）
4.执行完第3步后，你的本地项目文件夹下面会多出个文件夹，我们把本地项目下所有文件（新增加的文件夹不用）都移动到新增的文件夹下 5.接着输入命令 cd photo.io ，进入 photo.io 文件夹 6.再然后，一次输入如下代码 git add . (用于把photo文件夹下的文件都添加进来) git commit -m &amp;ldquo;abc&amp;rdquo; (相当于一次提交备注，所有这次提交地文件，都会有这个备注) git push -u origin master (把本地仓库push到github上，这个步骤要输入你的账号和密码) 教程来自：博客园 【持续更新中&amp;hellip;&amp;hellip;】 </description>
    </item>
    
  </channel>
</rss>